[
["index.html", "Devdoc-Swissknife EN Preface", " Devdoc-Swissknife EN Nikolay Gniteev 2021-09-30 Preface This is a demo project for development documentation generation with R Markdown and Kroki This approach allows you to create reproducible documentation in form of PDF, presentations, gitbook and some other HTML formats from simple markdown-like files (Pandoc flavor) with extra R chunks and textual diagrams description. The goal of this project is to describe documentation via text files as much as possible, even graphic diagrams, and make it easy to use without overcomplication. A textual description provides an easy way to version and merge diagrams, get differences between versions, leave comments that stays out from generated documentation, review changes, etc. Also most often it’s faster to create and edit diagrams as text, do things like theming and refactoring themes. Since the diagram’s textual description often is more a model than just graphics, you don’t have to track existing objects relations when just placement is changed or objects added (until you rename objects) which makes your workflow less error-prone. R Markdown itself is a powerful and customizable tool, so you can fit docs to your needs. It would take efforts on start, to make things neat but it would repay you in the end. To produce awesome PDFs you’ll have to provide awesome Latex book class. Since I don’t have one I’m using Latex default so current PDF version looks a bit ugly to me. I hope I can fix this soon or later. Help is appreciated! This project is also can be used as a template for your own documentation, see this section The project uses docker and docker-compose to build docs so it’s ready to be integrated into your CI/CD flow. The project’s structure, docs generation and some files are based on R Markdown book There are few demonstrations in the project for general development use-cases (which probably cover 95% of your daily needs). For more complicated use-cases - checkout docs on links below. Diagrams code for most examples is borrowed straight from Kroki Following links would be helpful to you: List of supported diagrams renderers - https://kroki.io/#support A few more diagrams examples - https://kroki.io/examples.html R Markdown: The Definitive Guide - https://bookdown.org/yihui/rmarkdown/ created by one of R Markdown authors and generated with R Markdown R Markdown: Cookbook - https://bookdown.org/yihui/rmarkdown-cookbook/ A nice R Markdown tutorial - https://rmd4sci.njtierney.com/ R Markdown cheatsheet - https://raw.githubusercontent.com/rstudio/cheatsheets/master/rmarkdown.pdf R Markdown reference - https://rmarkdown.rstudio.com/docs/reference/index.html Keenwrite - edit and preview R Markdown Live! "],
["1-simple-diagrams-examples.html", "1 Simple diagrams examples", " 1 Simple diagrams examples Since this project is focused on embedding diagrams text descriptions into R Markdown let’s start with few examples just to illustrate a principle. "],
["1-1-example-with-inline-diagram-description.html", "1.1 Example with inline diagram description", " 1.1 Example with inline diagram description This example shows how to embed diagrams, describing them right in Rmd file This code: ```{r echo=FALSE, results=&#39;asis&#39;} to_diagram(&quot;graphviz&quot;, &quot;Hello World&quot;, &quot;digraph G {Hello-&gt;World}&quot; ) ``` would produce following diagram: G Hello Hello World World Hello-&gt;World Hello World Take a NOTE: When diagrams are inserted like this it’s IMPORTANT that (“Hello World” in this example) is UNIQUE for WHOLE doc. More details on usage is in … "],
["1-2-example-with-diagram-data-from-file.html", "1.2 Example with diagram data from file", " 1.2 Example with diagram data from file This example shows how to embed diagrams with data from outer files. This code: ```{r echo=FALSE, results=&#39;asis&#39;} to_diagram(&quot;erd&quot;, &quot;Entity Relation&quot;, src=&quot;../diagrams/examples/project.erd&quot;) ``` would produce following diagram: Person Personnameheightweightbirth_location_id Location Locationidcitystatecountry Person–Location 10..N Entity Relation File diagrams/examples/project.erd content: [Person] *name height weight +birth_location_id [Location] *id city state country Person *--1 Location "],
["1-3-more-examples.html", "1.3 More examples", " 1.3 More examples More examples can be found in this section. "],
["2-as-template.html", "2 Using as a template and making own docs", " 2 Using as a template and making own docs To use this project as a start point for generating your own documentation do the following: Import project and prepare for making docs You’ll need to have already docker and docker-compose installed Import or fork main branch of this repo: https://github.com/Godhart/devdoc-swissknife All the sources for docs are contained in docs_src folder. Make a new folder in docs_src. I suggest you name it using the following pattern: doc-&lt;subject&gt; Copy all the files from docs_src/docs-template into your brand new folder Replace following keywords &lt;Author Name&gt;, &lt;author&gt;, &lt;repo&gt;, &lt;Document Title&gt;, Document_Title, &lt;Document Description&gt;, doc- within files in your new folder with actual values. Don’t forget also to adjust Document_Title in the .gitignore of new folder, as it protects from build garbage. If you don’t want to see devdoc-swissknife documentation in your repo: Remove docs_src/devdoc-swissknife-* folders Empty docs_src/diagrams folder. Adjust docs_src/Makefile to fit your needs (for the first time - use an existing pattern to add your folder). Make docker image devdoc-swissknife if you don’t have one already. Simply run make_docker.sh from docker dir. Try to make docs with make_docs.sh. Output docs should appear in docs_out/doc-&lt;subject&gt; folder if you followed a pattern in the Makefile. Take a NOTE: docs_out folder and all it’s content is ignored by git. NOTE: in many cases of errors doc’s sources folder is polluted with temporary files, named as specified in _bookdown.yml (field book_filename) and may break following docs generation runs. These files are removed with make routine, but in some cases, you’ll have to remove them by yourself. Changing book_filename field in _bookdown.yml after an error has happened may be the case. Create content Update index.Rmd in your folder to your needs (contains Preface section). Add your own docs into your folder, naming files like &lt;number&gt;-&lt;chapter-name&gt;.Rmd. Check the R Markdown and Kroki docs for understanding things. Also, you may rely on shown examples. If you already have docs in markdown format you may already use them like this: copy markdown files into your doc-folder copy necessary local images to location in docs_src/diagrams or wherever you like most change name extensions of markdown files to .Rmd change names of markdown files so they would correspond to pattern &lt;number&gt;-&lt;chapter-name&gt;.Rmd change references to local images in markdown files If you already have text description of diagrams for supported rendering engines you may already use them like this: copy necessary files to location in docs_src/diagrams or wherever you like most in Rmd files replace image embedding with diagram embedding as described TODO Most probably you would like to use your own Latex class, so add &lt;your_latex_class&gt;.cls file into your folder and specify it in index.Rmd file (replace documentclass: book field with &lt;your_latex_class&gt; name). Adding custom latex class may require you to add some latex packages to Docker image. Same is true if you do use some special R packages in your docs etc. If this is the case you’ll have to modify docker/Dockerfile and build again docker image with make_docker.sh. "],
["3-examplesKroki.html", "3 Kroki usage examples", " 3 Kroki usage examples I’ve omitted some examples from Kroki and left only those that most useful in a daily life of most developers (IMHO). If you check docs for supported diagrams renderers then you’ll find for sure a few more interesting usecases. All diagrams data for examples of this section resides in docs_src/diagrams/examples dir of this repo. Each diagram is included into doc by adding following code section into document file: ```{r echo=FALSE, results=&#39;asis&#39;} to_diagram(&quot;from_src&quot;, &quot;&lt;Drawing name&gt;&quot;, src=&quot;../diagrams/&lt;src_file_path_within_diagrams_dir&gt;&quot;) ``` Full code for this whole section is here This usage pattern is described in the following section TODO "],
["3-1-c4-context-diagram-plantumlc4.html", "3.1 C4 Context Diagram (PlantUML+C4)", " 3.1 C4 Context Diagram (PlantUML+C4) Engine: c4plantuml System Context diagram for Internet Banking SystemPersonal BankingCustomerA customer of the bank, withpersonal bank accounts.Internet Banking SystemAllows customers to viewinformation about their bankaccounts, and make payments.E-mail systemThe internal MicrosoftExchange e-mail system.Mainframe BankingSystemStores all of the core bankinginformation about customers,accounts, transactions, etc.UsesSends e-mails toSends e-mails[SMTP]UsesLegendpersonsystemexternal personexternal system Example - C4 Context Diagram "],
["3-2-c4-container-diagram-plantumlc4.html", "3.2 C4 Container Diagram (PlantUML+C4)", " 3.2 C4 Container Diagram (PlantUML+C4) Engine: c4plantuml Container diagram for Internet Banking SystemInternet Banking[System]Web Application[Java, Spring MVC]Delivers the static content andthe Internet banking SPASingle-Page App[JavaScript, Angular]Provides all the Internetbanking functionality tocutomers via their web browserMobile App[C#, Xamarin]Provides a limited subset of theInternet banking functionality tocustomers via their mobiledeviceDatabase[SQL Database]Stores user registraioninformation, hased authcredentials, access logs, etc.API Application[Java, Docker Container]Provides Internet bankingfunctionality via APICustomerA customer of the bank, withpersonal bank accountsE-Mail SystemThe internal MicrosoftExchange systemMainframe BankingSystemStores all of the core bankinginformation about customers,accounts, transactions, etc.Uses[HTTPS]Uses[HTTPS]UsesDeliversUses[async, JSON/HTTPS]Uses[async, JSON/HTTPS]Reads from and writes to[sync, JDBC]Sends e-mails toSends e-mails using[sync, SMTP]Uses[sync/async, XML/HTTPS]Legendpersonsystemcontainerexternal personexternal systemexternal container Example - C4 Container Diagram "],
["3-3-c4-component-diagram-plantumlc4.html", "3.3 C4 Component Diagram (PlantUML+C4)", " 3.3 C4 Component Diagram (PlantUML+C4) Engine: c4plantuml Component diagram for Internet Banking System - API ApplicationAPI Application[Container]Sign In Controller[MVC Rest Controlle]Allows users to sign in to theinternet banking systemAccounts SummaryController[MVC Rest Controlle]Provides customers with asummory of their bank accountsSecurity Component[Spring Bean]Provides functionality related tosinging in, changingpasswords, etc.Mainframe BankingSystem Facade[Spring Bean]A facade onto the mainframebanking system.Single Page Application[javascript and angular]Provides all the internetbanking functionality tocustomers via their webbrowser.Mobile App[Xamarin]Provides a limited subset ot theinternet banking functionality tocustomers via their mobilemobile device.Database[Relational Database Schema]Stores user registrationinformation, hashedauthentication credentials,access logs, etc.Mainframe BankingSystemStores all of the core bankinginformation about customers,accounts, transactions, etc.UsesUsesRead &amp; write to[JDBC]Uses[XML/HTTPS]Uses[JSON/HTTPS]Uses[JSON/HTTPS]Uses[JSON/HTTPS]Uses[JSON/HTTPS]Legendpersonsystemcontainercomponentexternal personexternal systemexternal containerexternal component Example - C4 Component Diagram "],
["3-4-block-diagram.html", "3.4 Block Diagram", " 3.4 Block Diagram Engine: blockdiag blockdiag blockdiag {blockdiag -&gt; generates -&gt; “block-diagrams”;blockdiag -&gt; is -&gt; “very easy!”;blockdiag [color = “greenyellow”];“block-diagrams” [color = “pink”];“very easy!” [color = “orange”];} blockdiag generates is block-diagrams very easy! Example - Block Diagram "],
["3-5-digital-timing-diagram.html", "3.5 Digital Timing Diagram", " 3.5 Digital Timing Diagram Engine: wavedrom text{font-size:11pt;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:center;fill-opacity:1;font-family:Helvetica}.h1{font-size:33pt;font-weight:bold}.h2{font-size:27pt;font-weight:bold}.h3{font-size:20pt;font-weight:bold}.h4{font-size:14pt;font-weight:bold}.h5{font-size:11pt;font-weight:bold}.h6{font-size:8pt;font-weight:bold}.muted{fill:#aaa}.warning{fill:#f6b900}.error{fill:#f60000}.info{fill:#0041c4}.success{fill:#00ab00}.s1{fill:none;stroke:#000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none}.s2{fill:none;stroke:#000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none}.s3{color:#000;fill:none;stroke:#000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:1, 3;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible}.s4{color:#000;fill:none;stroke:#000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible}.s5{fill:#fff;stroke:none}.s6{fill:#000;fill-opacity:1;stroke:none}.s7{color:#000;fill:#fff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s8{color:#000;fill:#ffffb4;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s9{color:#000;fill:#ffe0b9;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s10{color:#000;fill:#b9e0ff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s11{color:#000;fill:#ccfdfe;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s12{color:#000;fill:#cdfdc5;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s13{color:#000;fill:#f0c1fb;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s14{color:#000;fill:#f5c2c0;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s15{fill:#0041c4;fill-opacity:1;stroke:none}.s16{fill:none;stroke:#0041c4;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none} clkDataheadbodytaildataRequestAcknowledge Example - Digital Timing Diagram "],
["3-6-bytefield.html", "3.6 Bytefield", " 3.6 Bytefield Engine: bytefield 0123456789abcdefstartTxIDtypeargstags11872349ae11TxID1047020f091400100000000c (12)060606030606060603000000201100002104110000000011length11430length1Cue and loop point bytes40i+00110000003611numhot11numcuei+00i+1011length214length2Unknown bytesi+20i+00 Example - Bytefield "],
["3-7-packet-diagram.html", "3.7 Packet Diagram", " 3.7 Packet Diagram Engine: packetdiag Example - Packet Diagram "],
["3-8-sequence-diagram-1-plantuml.html", "3.8 Sequence Diagram #1 (PlantUML)", " 3.8 Sequence Diagram #1 (PlantUML) Engine: plantuml AliceAliceBobBobLogLogAuthentication Requestalt[successful case]Authentication Accepted[some kind of failure]Authentication FailureMy own labelLog attack startloop[1000 times]DNS AttackLog attack end[Another type of failure]Please repeat Example - Sequence Diagram - PlantUML "],
["3-9-sequence-diagram-2-seqdiag.html", "3.9 Sequence Diagram #2 (SeqDiag)", " 3.9 Sequence Diagram #2 (SeqDiag) Engine: seqdiag blockdiag seqdiag { browser -&gt; webserver [label = “GET /index.html”]; browser &lt;– webserver; browser -&gt; webserver [label = “POST /blog/comment”]; webserver -&gt; database [label = “INSERT comment”]; webserver &lt;– database; browser &lt;– webserver;} browser webserver database GET /index.html POST /blog/comment INSERT comment Example - Sequence Diagram - SeqDiag "],
["3-10-commit-graph.html", "3.10 Commit Graph", " 3.10 Commit Graph Engine: pikchr NOTE: pikchr is giving troubles in PDF/PNG (produced SVG output is only web-browser friendly) C0C1C2C4C6C3C5C3’C5’trunkfeature branchC0C1C2C4C6C3C5C7trunkfeature branch Example - Commit Graph "],
["3-11-use-case-diagram.html", "3.11 Use Case Diagram", " 3.11 Use Case Diagram Engine: plantuml checkoutcheckoutpaymenthelpcustomerclerkincludeextends Example Block Diagram "],
["3-12-mind-map.html", "3.12 Mind Map", " 3.12 Mind Map Engine: plantuml OSUbuntuLinux MintKubuntuLubuntuKDE NeonLMDESolydXKSteamOSRaspbianWindows 95Windows 98Windows NTWindows 8Windows 10 Example - Mind Map "],
["3-13-plantuml-more-examples.html", "3.13 PlantUML (More examples)", " 3.13 PlantUML (More examples) PlantUML supports more diagram types like timing diagram, gantt and many more. You can use any of them just like in previous examples. Check PlantUML docs https://plantuml.com/ for filling in diagram data. "],
["3-14-gantt.html", "3.14 Gantt", " 3.14 Gantt Engine: mermaid NOTE: mermaid is giving troubles in PDF/PNG (produced SVG output is only web-browser friendly) #mermaid-1632975649173{font-family:&quot;trebuchet ms&quot;,verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-1632975649173 .error-icon{fill:#552222;}#mermaid-1632975649173 .error-text{fill:#552222;stroke:#552222;}#mermaid-1632975649173 .edge-thickness-normal{stroke-width:2px;}#mermaid-1632975649173 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1632975649173 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1632975649173 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1632975649173 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1632975649173 .marker{fill:#333333;stroke:#333333;}#mermaid-1632975649173 .marker.cross{stroke:#333333;}#mermaid-1632975649173 svg{font-family:&quot;trebuchet ms&quot;,verdana,arial,sans-serif;font-size:16px;}#mermaid-1632975649173 .mermaid-main-font{font-family:&quot;trebuchet ms&quot;,verdana,arial,sans-serif;font-family:var(--mermaid-font-family);}#mermaid-1632975649173 .section{stroke:none;opacity:0.2;}#mermaid-1632975649173 .section0{fill:rgba(102,102,255,0.49);}#mermaid-1632975649173 .section2{fill:#fff400;}#mermaid-1632975649173 .section1,#mermaid-1632975649173 .section3{fill:white;opacity:0.2;}#mermaid-1632975649173 .sectionTitle0{fill:#333;}#mermaid-1632975649173 .sectionTitle1{fill:#333;}#mermaid-1632975649173 .sectionTitle2{fill:#333;}#mermaid-1632975649173 .sectionTitle3{fill:#333;}#mermaid-1632975649173 .sectionTitle{text-anchor:start;font-family:'trebuchet ms',verdana,arial,sans-serif;font-family:var(--mermaid-font-family);}#mermaid-1632975649173 .grid .tick{stroke:lightgrey;opacity:0.8;shape-rendering:crispEdges;}#mermaid-1632975649173 .grid .tick text{font-family:&quot;trebuchet ms&quot;,verdana,arial,sans-serif;fill:#333;}#mermaid-1632975649173 .grid path{stroke-width:0;}#mermaid-1632975649173 .today{fill:none;stroke:red;stroke-width:2px;}#mermaid-1632975649173 .task{stroke-width:2;}#mermaid-1632975649173 .taskText{text-anchor:middle;font-family:'trebuchet ms',verdana,arial,sans-serif;font-family:var(--mermaid-font-family);}#mermaid-1632975649173 .taskTextOutsideRight{fill:black;text-anchor:start;font-family:'trebuchet ms',verdana,arial,sans-serif;font-family:var(--mermaid-font-family);}#mermaid-1632975649173 .taskTextOutsideLeft{fill:black;text-anchor:end;}#mermaid-1632975649173 .task.clickable{cursor:pointer;}#mermaid-1632975649173 .taskText.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold;}#mermaid-1632975649173 .taskTextOutsideLeft.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold;}#mermaid-1632975649173 .taskTextOutsideRight.clickable{cursor:pointer;fill:#003163 !important;font-weight:bold;}#mermaid-1632975649173 .taskText0,#mermaid-1632975649173 .taskText1,#mermaid-1632975649173 .taskText2,#mermaid-1632975649173 .taskText3{fill:white;}#mermaid-1632975649173 .task0,#mermaid-1632975649173 .task1,#mermaid-1632975649173 .task2,#mermaid-1632975649173 .task3{fill:#8a90dd;stroke:#534fbc;}#mermaid-1632975649173 .taskTextOutside0,#mermaid-1632975649173 .taskTextOutside2{fill:black;}#mermaid-1632975649173 .taskTextOutside1,#mermaid-1632975649173 .taskTextOutside3{fill:black;}#mermaid-1632975649173 .active0,#mermaid-1632975649173 .active1,#mermaid-1632975649173 .active2,#mermaid-1632975649173 .active3{fill:#bfc7ff;stroke:#534fbc;}#mermaid-1632975649173 .activeText0,#mermaid-1632975649173 .activeText1,#mermaid-1632975649173 .activeText2,#mermaid-1632975649173 .activeText3{fill:black !important;}#mermaid-1632975649173 .done0,#mermaid-1632975649173 .done1,#mermaid-1632975649173 .done2,#mermaid-1632975649173 .done3{stroke:grey;fill:lightgrey;stroke-width:2;}#mermaid-1632975649173 .doneText0,#mermaid-1632975649173 .doneText1,#mermaid-1632975649173 .doneText2,#mermaid-1632975649173 .doneText3{fill:black !important;}#mermaid-1632975649173 .crit0,#mermaid-1632975649173 .crit1,#mermaid-1632975649173 .crit2,#mermaid-1632975649173 .crit3{stroke:#ff8888;fill:red;stroke-width:2;}#mermaid-1632975649173 .activeCrit0,#mermaid-1632975649173 .activeCrit1,#mermaid-1632975649173 .activeCrit2,#mermaid-1632975649173 .activeCrit3{stroke:#ff8888;fill:#bfc7ff;stroke-width:2;}#mermaid-1632975649173 .doneCrit0,#mermaid-1632975649173 .doneCrit1,#mermaid-1632975649173 .doneCrit2,#mermaid-1632975649173 .doneCrit3{stroke:#ff8888;fill:lightgrey;stroke-width:2;cursor:pointer;shape-rendering:crispEdges;}#mermaid-1632975649173 .milestone{-webkit-transform:rotate(45deg) scale(0.8,0.8);-ms-transform:rotate(45deg) scale(0.8,0.8);transform:rotate(45deg) scale(0.8,0.8);}#mermaid-1632975649173 .milestoneText{font-style:italic;}#mermaid-1632975649173 .doneCritText0,#mermaid-1632975649173 .doneCritText1,#mermaid-1632975649173 .doneCritText2,#mermaid-1632975649173 .doneCritText3{fill:black !important;}#mermaid-1632975649173 .activeCritText0,#mermaid-1632975649173 .activeCritText1,#mermaid-1632975649173 .activeCritText2,#mermaid-1632975649173 .activeCritText3{fill:black !important;}#mermaid-1632975649173 .titleText{text-anchor:middle;font-size:18px;fill:#333;font-family:'trebuchet ms',verdana,arial,sans-serif;font-family:var(--mermaid-font-family);}#mermaid-1632975649173:root{--mermaid-font-family:&quot;trebuchet ms&quot;,verdana,arial,sans-serif;} 2014-01-052014-01-122014-01-192014-01-262014-02-022014-02-092014-02-16A task Task in sec another task Another task SectionAnotherA Gantt Diagram Example - Gantt "]
]
