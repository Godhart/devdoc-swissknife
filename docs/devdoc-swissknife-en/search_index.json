[["index.html", "Devdoc-Swissknife EN Preface", " Devdoc-Swissknife EN Nikolay Gniteev 2022-05-14 Preface This is a demo project for development documentation generation with R Markdown and Kroki. All the things described here you could do without that project, but I’ve tried to stich those components together so you’ll be able to concentrate on content rather than process. This approach allows you to create reproducible documentation in form of PDF, presentations, gitbook and some other HTML formats from simple markdown-like files (Pandoc flavor) with extra R chunks and textual diagrams description. The goal of this project is to describe documentation via text files as much as possible, even graphic diagrams, and make it easy to use without overcomplication. A textual description provides an easy way to version and merge diagrams, get differences between versions, leave comments that stays out from generated documentation, review changes, etc. Also most often it’s faster to create and edit diagrams as text, do things like theming and refactoring themes. Since the diagram’s textual description often is more a model than just graphics, you don’t have to track existing objects relations when just placement is changed or objects added (until you rename objects) which makes your workflow less error-prone. Embedding textually described diagrams into docuement is the actual focus of this porject. The rest you would be able to do with R Markdown itself as it is a powerful and customizable tool, so you can fit docs to your needs. It would take efforts on start, to make things neat but it would repay you in the end. To produce awesome PDFs you’ll have to provide awesome Latex book class. Since I don’t have one I’m using Latex default so current PDF version looks a bit ugly to me. I hope I can fix this soon or later. Help is appreciated! Kroki is running locally in container so you may not worry for confidential things and it works well in air gapped installations. This project is also can be used as a template for your own documentation, see this section The project uses docker and docker-compose to build docs so it’s ready to be integrated into your CI/CD flow. The project’s structure, docs generation and some files are based on R Markdown book There are few demonstrations in the project for general development use-cases (which probably cover 95% of your daily needs). For more complicated use-cases - checkout docs on links below. Diagrams code for most examples is borrowed straight from Kroki Usage section would be updated eventually with reciepes for common cases. Helpful links Diagrams List of supported diagrams renderers A few more diagrams examples R Markdown R Markdown: The Definitive Guide R Markdown: Cookbook Bookdown: Authoring Books and Technical Docuements with R Markdown R Markdown Site (focused on usage with R Studio) A nice R Markdown tutorial R Markdown reference Get quick into R Markdown R Makedown anatomy R Markdown short reference to get familiar with most necessary things R Markdown cheatsheet Editors with focus on diagrams Keenwrite - edit and preview R Markdown Live! R Studio Alternatives https://bookdown.org/yihui/rmarkdown-cookbook/diagrams.html / https://rich-iannone.github.io/DiagrammeR/ "],["1-examples.html", "1 Simple diagrams examples", " 1 Simple diagrams examples Since this project is focused on embedding diagrams textual descriptions into R Markdown, let’s start with few examples just to illustrate a principle. BTW: there is a lot of drawings types that you can get from R Markdown alone, by using R packages or Python’s matplot lib for example. You may want to check this out too. Example with inline diagram description This example shows how to embed diagrams, describing them right in the .Rmd files. ```{r, hello-world, dia=&quot;graphviz&quot;, fig.cap=&quot;Hello World&quot;} to_diagram(&quot;digraph G {Hello-&gt;World}&quot;) ``` G Hello Hello World World Hello-&gt;World Hello World Example with diagram data from file This example shows how to embed diagrams with data from outer files. ```{r, examples-entity-relation, dia=&quot;erd&quot;, fig.cap=&quot;Entity Relation&quot;} to_diagram(src=&quot;../diagrams/examples/project.erd&quot;) ``` Person Personnameheightweightbirth_location_id Location Locationidcitystatecountry Person–Location 10..N Entity Relation File diagrams/examples/project.erd content: [Person] *name height weight +birth_location_id [Location] *id city state country Person *--1 Location More examples More examples for your inspiration can be found in this section. Details about embedding diagrams is here "],["2-template.html", "2 Using as a template and making own docs", " 2 Using as a template and making own docs To use this project as a start point for generating your own documentation do the following: Import project and prepare for making docs You’ll need to have already docker and docker-compose installed Import or fork main branch of this repo: https://github.com/Godhart/devdoc-swissknife. All the sources for docs are contained in docs_src folder. Make docker image devdoc-swissknife if you don’t have one already. Simply run make_docker.sh from docker dir. Ensure that everything works fine - try to make docs with make_docs.sh. Output docs should appear in docs_out/devdoc-swissknife-* folders. Check that docs exist and contain graphics. Take a NOTE: docs_out folder and all it’s content is ignored by git. If you don’t want to see devdoc-swissknife documentation in your repo: Remove docs_src/devdoc-swissknife-* folders Remove docs_out/devdoc-swissknife-* folders Empty docs_src/diagrams folder. Prepare for making your own docs Make a new folder in docs_src. I suggest you name it using the following pattern: doc-&lt;subject&gt; Copy all the files from docs_src/docs-template into your brand new folder Replace following keywords &lt;Author Name&gt;, &lt;author&gt;, &lt;repo&gt;, &lt;Document Title&gt;, Document_Title, &lt;Document Description&gt;, doc- within files in your new folder with actual values. Also don’t forget to adjust Document_Title in the .gitignore of new folder, as it protects from build garbage. Adjust docs_src/Makefile to fit your needs (for the first time - use an existing pattern to add your folder). Ensure that everything is still fine - try to make docs with make_docs.sh. Output docs should appear in docs_out/doc-&lt;subject&gt; folder if you followed a pattern in the Makefile. NOTE: in many cases of errors doc’s sources folder (docs_src/doc-&lt;subject&gt; if you follow suggested pattern) is polluted with temporary files, named as specified in _bookdown.yml (field book_filename) and may break following docs generation runs. These files are removed with make routine, but in some cases, you’ll have to remove them by yourself. Changing book_filename field in _bookdown.yml after an error has happened may be the case. Create content Update index.Rmd in your folder to your needs (contains Preface section). Add your own docs into your folder, naming files like &lt;number&gt;-&lt;chapter-name&gt;.Rmd. Check the R Markdown and Kroki docs for understanding things. Also, you may rely on shown examples. If you already have docs in markdown format you may already use them like this: copy markdown files into your doc-folder copy necessary local images to location in docs_src/diagrams or wherever you like most change name extensions of markdown files to .Rmd change names of markdown files so they would correspond to pattern &lt;number&gt;-&lt;chapter-name&gt;.Rmd change references to local images in markdown files If you already have text description of diagrams for supported rendering engines you may already use them like this: copy necessary files to location in docs_src/diagrams or wherever you like most in .Rmd files replace image embedding with diagram embedding as described TODO Most probably you would like to use your own Latex class, so add &lt;your_latex_class&gt;.cls file into your folder and specify it in index.Rmd file (replace documentclass: book field with &lt;your_latex_class&gt; name). Adding custom latex class may require you to add some latex packages to Docker image. Same is true if you do use some special R packages in your docs etc. If this is the case you’ll have to modify docker/Dockerfile and build again docker image with make_docker.sh. "],["3-examples-kroki.html", "3 Kroki usage examples", " 3 Kroki usage examples I’ve omitted some examples from Kroki and left only those that are most useful in a daily life of most developers (IMO). If you check docs for supported diagrams renderers then you’ll find for sure a few more interesting usecases. All diagrams data for examples of this section resides in docs_src/diagrams/examples dir of this repo. Each diagram is included into doc by adding following code section into document file: ```{r, &lt;reference-label&gt;, dia=&quot;from_src&quot;, fig.cap=&quot;&lt;Caption for your figure&gt;&quot;} to_diagram(src=&quot;../diagrams/&lt;src_file_path_within_diagrams_dir&gt;&quot;) ``` Full code for this whole section is here This usage pattern is described in the following section TODO "],["3.1-kroki-c4context.html", "3.1 C4 Context Diagram (PlantUML+C4)", " 3.1 C4 Context Diagram (PlantUML+C4) Engine: c4plantuml System Context diagram for Internet Banking SystemPersonal BankingCustomerA customer of the bank, withpersonal bank accounts.Internet Banking SystemAllows customers to viewinformation about their bankaccounts, and make payments.E-mail systemThe internal MicrosoftExchange e-mail system.Mainframe BankingSystemStores all of the core bankinginformation about customers,accounts, transactions, etc.UsesSends e-mails toSends e-mails[SMTP]UsesLegendpersonsystemexternal personexternal system Example - C4 Context Diagram "],["3.2-kroki-c4container.html", "3.2 C4 Container Diagram (PlantUML+C4)", " 3.2 C4 Container Diagram (PlantUML+C4) Engine: c4plantuml Container diagram for Internet Banking SystemInternet Banking[System]Web Application[Java, Spring MVC]Delivers the static content andthe Internet banking SPASingle-Page App[JavaScript, Angular]Provides all the Internetbanking functionality tocutomers via their web browserMobile App[C#, Xamarin]Provides a limited subset of theInternet banking functionality tocustomers via their mobiledeviceDatabase[SQL Database]Stores user registraioninformation, hased authcredentials, access logs, etc.API Application[Java, Docker Container]Provides Internet bankingfunctionality via APICustomerA customer of the bank, withpersonal bank accountsE-Mail SystemThe internal MicrosoftExchange systemMainframe BankingSystemStores all of the core bankinginformation about customers,accounts, transactions, etc.Uses[HTTPS]Uses[HTTPS]UsesDeliversUses[async, JSON/HTTPS]Uses[async, JSON/HTTPS]Reads from and writes to[sync, JDBC]Sends e-mails toSends e-mails using[sync, SMTP]Uses[sync/async, XML/HTTPS]Legendpersonsystemcontainerexternal personexternal systemexternal container Example - C4 Container Diagram "],["3.3-kroki-c4component.html", "3.3 C4 Component Diagram (PlantUML+C4)", " 3.3 C4 Component Diagram (PlantUML+C4) Engine: c4plantuml Component diagram for Internet Banking System - API ApplicationAPI Application[Container]Sign In Controller[MVC Rest Controlle]Allows users to sign in to theinternet banking systemAccounts SummaryController[MVC Rest Controlle]Provides customers with asummory of their bank accountsSecurity Component[Spring Bean]Provides functionality related tosinging in, changingpasswords, etc.Mainframe BankingSystem Facade[Spring Bean]A facade onto the mainframebanking system.Single Page Application[javascript and angular]Provides all the internetbanking functionality tocustomers via their webbrowser.Mobile App[Xamarin]Provides a limited subset ot theinternet banking functionality tocustomers via their mobilemobile device.Database[Relational Database Schema]Stores user registrationinformation, hashedauthentication credentials,access logs, etc.Mainframe BankingSystemStores all of the core bankinginformation about customers,accounts, transactions, etc.UsesUsesRead &amp; write to[JDBC]Uses[XML/HTTPS]Uses[JSON/HTTPS]Uses[JSON/HTTPS]Uses[JSON/HTTPS]Uses[JSON/HTTPS]Legendpersonsystemcontainercomponentexternal personexternal systemexternal containerexternal component Example - C4 Component Diagram "],["3.4-kroki-blockdiag.html", "3.4 Block Diagram", " 3.4 Block Diagram Engine: blockdiag blockdiag blockdiag {blockdiag -&gt; generates -&gt; “block-diagrams”;blockdiag -&gt; is -&gt; “very easy!”;blockdiag [color = “greenyellow”];“block-diagrams” [color = “pink”];“very easy!” [color = “orange”];} blockdiag generates is block-diagrams very easy! Example - Block Diagram "],["3.5-kroki-timing.html", "3.5 Digital Timing Diagram", " 3.5 Digital Timing Diagram Engine: wavedrom text{font-size:11pt;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:center;fill-opacity:1;font-family:Helvetica}.h1{font-size:33pt;font-weight:bold}.h2{font-size:27pt;font-weight:bold}.h3{font-size:20pt;font-weight:bold}.h4{font-size:14pt;font-weight:bold}.h5{font-size:11pt;font-weight:bold}.h6{font-size:8pt;font-weight:bold}.muted{fill:#aaa}.warning{fill:#f6b900}.error{fill:#f60000}.info{fill:#0041c4}.success{fill:#00ab00}.s1{fill:none;stroke:#000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none}.s2{fill:none;stroke:#000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none}.s3{color:#000;fill:none;stroke:#000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:1, 3;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible}.s4{color:#000;fill:none;stroke:#000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible}.s5{fill:#fff;stroke:none}.s6{fill:#000;fill-opacity:1;stroke:none}.s7{color:#000;fill:#fff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s8{color:#000;fill:#ffffb4;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s9{color:#000;fill:#ffe0b9;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s10{color:#000;fill:#b9e0ff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s11{color:#000;fill:#ccfdfe;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s12{color:#000;fill:#cdfdc5;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s13{color:#000;fill:#f0c1fb;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s14{color:#000;fill:#f5c2c0;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s15{fill:#0041c4;fill-opacity:1;stroke:none}.s16{fill:none;stroke:#0041c4;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none} clkDataheadbodytaildataRequestAcknowledge Example - Digital Timing Diagram "],["3.6-kroki-bytefield.html", "3.6 Bytefield", " 3.6 Bytefield Engine: bytefield 0123456789abcdefstartTxIDtypeargstags11872349ae11TxID1047020f091400100000000c (12)060606030606060603000000201100002104110000000011length11430length1Cue and loop point bytes40i+00110000003611numhot11numcuei+00i+1011length214length2Unknown bytesi+20i+00 Example - Bytefield "],["3.7-kroki-packet.html", "3.7 Packet Diagram", " 3.7 Packet Diagram Engine: packetdiag blockdiag packetdiag { colwidth = 32; node_height = 72; 0-15: Source Port; 16-31: Destination Port; 32-63: Sequence Number; 64-95: Acknowledgment Number; 96-99: Data Offset; 100-105: Reserved; 106: URG [rotate = 270]; 107: ACK [rotate = 270]; 108: PSH [rotate = 270]; 109: RST [rotate = 270]; 110: SYN [rotate = 270]; 111: FIN [rotate = 270]; 112-127: Window; 128-143: Checksum; 144-159: Urgent Pointer; 160-191: (Options and Padding); 192-223: data [colheight = 3];} 0 16 32 Source Port Destination Port Sequence Number Acknowledgment Number Data Offset Reserved URG ACK PSH RST SYN FIN Window Checksum Urgent Pointer (Options and Padding) data Example - Packet Diagram "],["3.8-kroki-pumlSequence.html", "3.8 Sequence Diagram #1 (PlantUML)", " 3.8 Sequence Diagram #1 (PlantUML) Engine: plantuml AliceAliceBobBobLogLogAuthentication Requestalt[successful case]Authentication Accepted[some kind of failure]Authentication FailureMy own labelLog attack startloop[1000 times]DNS AttackLog attack end[Another type of failure]Please repeat Example - Sequence Diagram - PlantUML "],["3.9-kroki-sequence.html", "3.9 Sequence Diagram #2 (SeqDiag)", " 3.9 Sequence Diagram #2 (SeqDiag) Engine: seqdiag blockdiag seqdiag { browser -&gt; webserver [label = “GET /index.html”]; browser &lt;– webserver; browser -&gt; webserver [label = “POST /blog/comment”]; webserver -&gt; database [label = “INSERT comment”]; webserver &lt;– database; browser &lt;– webserver;} browser webserver database GET /index.html POST /blog/comment INSERT comment Example - Sequence Diagram - SeqDiag "],["3.10-kroki-commitgraph.html", "3.10 Commit Graph", " 3.10 Commit Graph Engine: pikchr NOTE: pikchr is giving troubles in PDF/PNG (produced SVG output is only web-browser friendly) That’s why this diagram is absent in PDF version C0 Example - Commit Graph "],["3.11-kroki-pumlUsecase.html", "3.11 Use Case Diagram", " 3.11 Use Case Diagram Engine: plantuml checkoutcheckoutpaymenthelpcustomerclerkincludeextends Example Block Diagram "],["3.12-kroki-pumlMindmap.html", "3.12 Mind Map", " 3.12 Mind Map Engine: plantuml OSUbuntuLinux MintKubuntuLubuntuKDE NeonLMDESolydXKSteamOSRaspbianWindows 95Windows 98Windows NTWindows 8Windows 10 Example - Mind Map "],["3.13-kroki-pumlMore.html", "3.13 PlantUML (More examples)", " 3.13 PlantUML (More examples) PlantUML supports more diagram types like timing diagram, gantt and many more. You can use any of them just like in previous examples. Check PlantUML docs https://plantuml.com/ for filling in diagram data. "],["3.14-kroki-gantt.html", "3.14 Gantt", " 3.14 Gantt Engine: mermaid NOTE: mermaid is giving troubles in PDF/PNG (produced SVG output is only web-browser friendly) That’s why this diagram is absent in PDF version #mermaid-1652550863769 {font-family:&quot;trebuchet ms&quot;,verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-1652550863769 .error-icon{fill:#552222;}#mermaid-1652550863769 .error-text{fill:#552222;stroke:#552222;}#mermaid-1652550863769 .edge-thickness-normal{stroke-width:2px;}#mermaid-1652550863769 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1652550863769 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1652550863769 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1652550863769 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1652550863769 .marker{fill:#333333;stroke:#333333;}#mermaid-1652550863769 .marker.cross{stroke:#333333;}#mermaid-1652550863769 svg{font-family:&quot;trebuchet ms&quot;,verdana,arial,sans-serif;font-size:16px;}#mermaid-1652550863769 .mermaid-main-font{font-family:&quot;trebuchet ms&quot;,verdana,arial,sans-serif;font-family:var(--mermaid-font-family);}#mermaid-1652550863769 .section{stroke:none;opacity:0.2;}#mermaid-1652550863769 .section0{fill:rgba(102, 102, 255, 0.49);}#mermaid-1652550863769 .section2{fill:#fff400;}#mermaid-1652550863769 .section1,#mermaid-1652550863769 .section3{fill:white;opacity:0.2;}#mermaid-1652550863769 .sectionTitle0{fill:#333;}#mermaid-1652550863769 .sectionTitle1{fill:#333;}#mermaid-1652550863769 .sectionTitle2{fill:#333;}#mermaid-1652550863769 .sectionTitle3{fill:#333;}#mermaid-1652550863769 .sectionTitle{text-anchor:start;font-family:'trebuchet ms',verdana,arial,sans-serif;font-family:var(--mermaid-font-family);}#mermaid-1652550863769 .grid .tick{stroke:lightgrey;opacity:0.8;shape-rendering:crispEdges;}#mermaid-1652550863769 .grid .tick text{font-family:&quot;trebuchet ms&quot;,verdana,arial,sans-serif;fill:#333;}#mermaid-1652550863769 .grid path{stroke-width:0;}#mermaid-1652550863769 .today{fill:none;stroke:red;stroke-width:2px;}#mermaid-1652550863769 .task{stroke-width:2;}#mermaid-1652550863769 .taskText{text-anchor:middle;font-family:'trebuchet ms',verdana,arial,sans-serif;font-family:var(--mermaid-font-family);}#mermaid-1652550863769 .taskTextOutsideRight{fill:black;text-anchor:start;font-family:'trebuchet ms',verdana,arial,sans-serif;font-family:var(--mermaid-font-family);}#mermaid-1652550863769 .taskTextOutsideLeft{fill:black;text-anchor:end;}#mermaid-1652550863769 .task.clickable{cursor:pointer;}#mermaid-1652550863769 .taskText.clickable{cursor:pointer;fill:#003163!important;font-weight:bold;}#mermaid-1652550863769 .taskTextOutsideLeft.clickable{cursor:pointer;fill:#003163!important;font-weight:bold;}#mermaid-1652550863769 .taskTextOutsideRight.clickable{cursor:pointer;fill:#003163!important;font-weight:bold;}#mermaid-1652550863769 .taskText0,#mermaid-1652550863769 .taskText1,#mermaid-1652550863769 .taskText2,#mermaid-1652550863769 .taskText3{fill:white;}#mermaid-1652550863769 .task0,#mermaid-1652550863769 .task1,#mermaid-1652550863769 .task2,#mermaid-1652550863769 .task3{fill:#8a90dd;stroke:#534fbc;}#mermaid-1652550863769 .taskTextOutside0,#mermaid-1652550863769 .taskTextOutside2{fill:black;}#mermaid-1652550863769 .taskTextOutside1,#mermaid-1652550863769 .taskTextOutside3{fill:black;}#mermaid-1652550863769 .active0,#mermaid-1652550863769 .active1,#mermaid-1652550863769 .active2,#mermaid-1652550863769 .active3{fill:#bfc7ff;stroke:#534fbc;}#mermaid-1652550863769 .activeText0,#mermaid-1652550863769 .activeText1,#mermaid-1652550863769 .activeText2,#mermaid-1652550863769 .activeText3{fill:black!important;}#mermaid-1652550863769 .done0,#mermaid-1652550863769 .done1,#mermaid-1652550863769 .done2,#mermaid-1652550863769 .done3{stroke:grey;fill:lightgrey;stroke-width:2;}#mermaid-1652550863769 .doneText0,#mermaid-1652550863769 .doneText1,#mermaid-1652550863769 .doneText2,#mermaid-1652550863769 .doneText3{fill:black!important;}#mermaid-1652550863769 .crit0,#mermaid-1652550863769 .crit1,#mermaid-1652550863769 .crit2,#mermaid-1652550863769 .crit3{stroke:#ff8888;fill:red;stroke-width:2;}#mermaid-1652550863769 .activeCrit0,#mermaid-1652550863769 .activeCrit1,#mermaid-1652550863769 .activeCrit2,#mermaid-1652550863769 .activeCrit3{stroke:#ff8888;fill:#bfc7ff;stroke-width:2;}#mermaid-1652550863769 .doneCrit0,#mermaid-1652550863769 .doneCrit1,#mermaid-1652550863769 .doneCrit2,#mermaid-1652550863769 .doneCrit3{stroke:#ff8888;fill:lightgrey;stroke-width:2;cursor:pointer;shape-rendering:crispEdges;}#mermaid-1652550863769 .milestone{transform:rotate(45deg) scale(0.8,0.8);}#mermaid-1652550863769 .milestoneText{font-style:italic;}#mermaid-1652550863769 .doneCritText0,#mermaid-1652550863769 .doneCritText1,#mermaid-1652550863769 .doneCritText2,#mermaid-1652550863769 .doneCritText3{fill:black!important;}#mermaid-1652550863769 .activeCritText0,#mermaid-1652550863769 .activeCritText1,#mermaid-1652550863769 .activeCritText2,#mermaid-1652550863769 .activeCritText3{fill:black!important;}#mermaid-1652550863769 .titleText{text-anchor:middle;font-size:18px;fill:#333;font-family:'trebuchet ms',verdana,arial,sans-serif;font-family:var(--mermaid-font-family);}#mermaid-1652550863769 :root{--mermaid-font-family:&quot;trebuchet ms&quot;,verdana,arial,sans-serif;} 2014-01-052014-01-122014-01-192014-01-262014-02-022014-02-092014-02-16A task Task in sec another task Another task SectionAnotherA Gantt Diagram Example - Gantt "],["4-usage.html", "4 Usage patterns", " 4 Usage patterns There are few proposed ways to embed diagrams into a document and to customize them. Which one to use depends on circumstances. This section would be updated as project evolves "],["4.1-usage-embed.html", "4.1 Embedding diagrams into a document", " 4.1 Embedding diagrams into a document Let’s cover basics on embedding diagrams into documentation first. 4.1.1 Describing diagrams inline in the documentation Useful for short and/or strongly context-related drawings, i.e. when drawing by itself have no meaning or there is no reason for storing it in a separate file. Following pattern should be used: ```{r &lt;label&gt;, dia=&#39;&lt;engine&gt;&#39;, fig.cap=&#39;&lt;drawing name&gt;&#39;} to_diagram(&#39;&lt;diagram data&gt;&#39;) ``` where: &lt;label&gt; is a name for a drawing reference, may be omitted &lt;engine&gt; is a name for a rendering engine, see table for allowed values and corresponding engines &lt;drawing name&gt; is a caption for drawing, may be omitted. &lt;diagram data&gt; is a textual diagram description in a format that is compatible with a rendering engine NOTE: if there are single quotes in the &lt;diagram data&gt; then you should escape them with \\ symbol or surround &lt;diagram data&gt; with double-quotes (\") instead. 4.1.2 Diagrams from raw outer files This is the case if you already have a diagram description in a separate file and you want to keep it like that for some reason. For new diagrams it’s proposed to use method, described in the next section. It also uses outer files, but requires some extra formating. Raw file is a text file that contains diagram description data in a format that is compatible with a rendering engine and nothing more. Following pattern should be used: ```{r &lt;label&gt;, dia=&#39;&lt;engine&gt;&#39;, fig.cap=&#39;&lt;drawing name&gt;&#39;} to_diagram(src=&#39;&lt;src_file_path&gt;&#39;) ``` where: &lt;label&gt; is a name for a drawing reference, may be omitted &lt;engine&gt; is a name for a rendering engine, see table for allowed values and corresponding engines &lt;drawing name&gt; is a caption for drawing, mey be omitted &lt;src_file_path&gt; is a path to file with diagram data, relative to file into which it’s embedded. If you are using suggested locations to place docs and diagrams (docs_src/doc-&lt;subject&gt; and docs_src/diagrams) then value for &lt;src_file_path&gt; should be starting like this: ../diagrams/ 4.1.3 Diagrams from Rmd outer file This is a proposed way to describe diagrams in outer files. Diagram data should be in .Rmd file and described as specified in docs_src/diagrams/README.md TODO. This way you’ll be able to use Keenwrite to preview diagrams live while editing, which is very handy. Besides that, you can supply a diagram with additional info, capture decisions that were taken, add TODOs, versions info, etc. along with diagram’s data in the same file. Following pattern should be used: ```{r &lt;label&gt;, dia=&#39;from_src&#39;, fig.cap=&#39;&lt;drawing name&gt;&#39;} to_diagram(src=&#39;&lt;src_file_path&gt;&#39;) ``` where: &lt;label&gt; is a name for a drawing reference, may be omitted &lt;drawing name&gt; is a caption for drawing, mey be omitted &lt;src_file_path&gt; is a path to file with diagram data, relative file into which it’s embedded. If you are using suggested locations to place docs and diagrams (docs_src/doc-&lt;subject&gt; and docs_src/diagrams) then value for &lt;src_file_path&gt; should be starting like this: ../diagrams/ Take a NOTE: A from_src is specified as engine in this case since an actual engine name is already specified in .Rmd file with diagram data. 4.1.4 Get then embed This is the case if you want to customize diagrams embedding, like aligning, multiple diagrams in a single row, preprocess diagrams before embedding them, etc. The process is divided into few phases: Download one or multiple rendered images for your diagrams Preprocess diagrams if required Embed them into document NOTE: diagrams are still described in a text form Following pattern should be used: # Download diagram ```{r dia=&#39;from_src&#39;} to_diagram(src=&#39;&lt;src_file_path&gt;&#39;, downloadOnly=TRUE, downloadName=&#39;&lt;file_name&gt;&#39;) ``` # Download more diagrams if required (like the one above) ... # Process diagram(s) if required # Use code chunks for this (R, bash, python and many more with necessary commands) ... # Embed diagram(s) ```{r &lt;label&gt;, echo=FALSE, fig.cap=&#39;&lt;drawing name&gt;&#39;} knitr::include_graphics(&#39;generated/&lt;file_name&gt;.&lt;file_ext&gt;&#39;) ``` NOTE: Example code is shown for outer Rmd file but there is additional downloadOnly and downloadName arguments are specified in the first code chunk. Inline diagram description and raw outer file may be used aswell. where: &lt;label&gt; is a name for a drawing reference, may be omitted &lt;drawing name&gt; is a caption for drawing, mey be omitted &lt;file_name&gt; is a name that is given to downloaded diagram &lt;file_ext&gt; is an extension is given depending on output format and optional arguments. By default it’s: .svg for HTML output .pdf for PDF output .png for other kinds Take a NOTE: For postprocessing you can use R, Python, whatever can be called from BASH and many more (depends on your docker image). More on R chunks: https://bookdown.org/yihui/rmarkdown/r-code.html, this and this More on other formats: https://bookdown.org/yihui/rmarkdown/language-engines.html "],["4.2-usage-svg.html", "4.2 HTML: SVG - Raw vs from File", " 4.2 HTML: SVG - Raw vs from File By default diagrams are rendered as SVG for HTML output. This format is supported by all rendering engines in Kroki, and produces great results for HTML. But there is two ways how it’s embedded into HTML. It’s defined with additional rawsvg argument for to_diagram function. 4.2.1 Raw SVG By default SVG content is inserted as a code right into output HTML file and this is what Raw is. Specify optional rawsvg argument as TRUE for to_diagram function or just ommit it. PROs: Text in SVG becomes searchable and selectable. CONs: Diagrams aren’t treated as images anymore and you can’t use ‘save as’ by clicking on them. But in this case caption for the diagram will be a reference to an SVG file, so you are still able to save diagrams as files You’ll have to find your way to post process it if necessary (It’s still possible, but I can’t offer ‘ready to use’ recipe yet, and as always there are few ways to do it) Lack of customizations (only width, height and alignment available) (Probably it could be workarounded but no recipe yet) Since (IMO) strong customizations and postprocessing is hardly a case for common development docs, RAW svg is used by default. 4.2.2 SVG from file Rendered SVG also can be inserted into HTML as a normal image. It still looks neat when scaled, but now it’s just a picture. Specify optional rawsvg argument as FALSE for to_diagram function. This way you’ll be able to apply more customizations and do postprocessing if necessary. "],["4.3-usage-customize.html", "4.3 Customizations", " 4.3 Customizations Sometimes you’ll want to or need to specify a customizations like width or hight of diagrams when defaults don’t work fine or just because of your taste or requirements. Also sometimes you’ll have to use non-default image format for the same reasons. Or you may want to go deeper with customizations and define alignment and other things like post processing, multiple images in a row, etc. Probably you wouldn’t want to use customizations at all when you in the beginning or in hurry to capture your ideas, but if you need some - start from here. Most of customizations are specified via R chunk options. In case if it’s required to download rendered diagram in format other than SVG use dformat argument for to_diagram function. Also for PDF production you’ll want for sure things like page break, page orientation specification etc. In this case you will need to add some latex commands into document. 4.3.1 R Chunks R Chunks is a way to embed graphics data in R Markdown. Another way is to use markdown syntax like ![&lt;alt text&gt;](&lt;path to image&gt;){&lt;options&gt;}, but it’s not the case since it works for ready to use images only. Customizations to the way an image is embded are speicifed via R chunk options. More info about options could be found here and here is a nice cheatsheet. Following options have effect for diagrams: out.width out.height TODO Following options have no effect for diagrams: fig.width fig.height TODO The other way to customize is to use hooks. It’s very creative way and all depends on your needs. Besides spcifying options explicitly for every chunk, you can define default values globally or via named templates, use option hooks to automatically derive one options from another. See more about this in the following sections. 4.3.2 Global options This is done by putting chunk of code with knitr::opts_chunk$set function call in the beginning of your documentation (i.e. index.Rmd). Also global options could be redefined later in documentation for the following chunks. For example this could be done in the beginning of every chapter. ATTENTION: But make sure in that case that you follow this pattern throughout whole document, otherwise you may find yourself fighting with customizations. Global options could be good for output format related customizations, in other cases it’s better to use templates, described in next section. Example code to define chunk options globally: ```{r, include=FALSE} knitr::opts_chunk$set( out.width = &#39;5cm&#39; ) ``` More info could be found here 4.3.3 Options templates This is done by putting chunk of code with knitr::opts_template$set function call in the beginning of your documentation (i.e. index.Rmd). Also new templates could be defined later in documentation for the following chunks. For example this could be done in the beginning of every chapter. Example code to define options template: # Define template ```{r, include=FALSE} knitr::opts_template$set(fullwidth = list( out.width = &#39;100%&#39; )) ``` # Embed diagram, using template for options ```{r, dia=&#39;from_src&#39;, opts.label=&#39;fullwidth&#39;} to_diagram(src=&#39;...&#39;) ``` # More options for diagram and/or template&#39;s defaults override ```{r, dia=&#39;from_src&#39;, opts.label=&#39;fullwidth&#39;, fig.ext=&#39;png&#39;, out.width=&#39;10cm&#39;} to_diagram(src=&#39;...&#39;) ``` More info could be found here 4.3.4 Options hooks With options hooks you can define dependencies for chunk options with code in R. You can even define hooks for your own options and specify this options for chunks. For example hook for dia option is defined in _fun.R and some chunk’s options depends on it. This is done by putting chunk of code with knitr::opts_hooks$set function call in the beginning of your documentation (i.e. index.Rmd). Also new hooks cold be added or hooks could be redefined later in documentation for the following chunks. For example this could be done in the beginning of every chapter. Example code to add options hooks: ```{r, include=FALSE} # Define hook for existing option out.width knitr::opts_hooks$set(out.width = function(options){ # Some sanity checks if (!identical(options$out.width, NULL)) { # Our function: if out.width is set to 100% then clear out.height option if (options$out.width == &quot;100%&quot;) { options$out.height &lt;- NULL } } # Return new set of options options }) # Define hook for new option fullwidth knitr::opts_hooks$set(fullwidth = function(options){ # Some sanity checks if (!identical(options$fullwidth, NULL)) { # Our function: if fullwidth is defined and evaluated as TRUE then set out.width to 100% if (fullwidth) { options$out.width &lt;- &quot;100%&quot; } } # Return new set of options options }) ``` # Embed diagram, using new option to define width ```{r, dia=&#39;from_src&#39;, fullwidth=TRUE} to_diagram(src=&#39;...&#39;) ``` 4.3.5 Multiple output formats If you are intended to produce documentation in multiple output formats, most probably you’ll have to apply different customizations for different formats. This could be easily achived by using R if ... else ... pattern (works like ternary operator) when applying values to options, or with a few lines R code in complicated cases. For example: ```{r, dia=&#39;from_src&#39;, out.height=if (!knitr::is_html_output()) &#39;15cm&#39; else NULL} to_diagram(src=&#39;...&#39;) ``` will set drawing’s height to 15 centimeters for output formats other than HTML. 4.3.6 Define parameters There is a way to separate actual values for options from code via parameters, that are defined in a front‑matter part of index.Rmd. This way you could tune your output or other aspects of your documentation just by adjusting those values and keep them all in a single place. By the way - there is already some params defined that are reqruired for to_diagram function and related hooks. Values for parameters can be calculated just in time with R by defining their values using following pattern: `r &lt;R expressions&gt;`, replacing &lt;R expressions&gt; with your R code. Parameters definition example: # This is front-matter&#39;s section to define params params: # Static value: background: &quot;#FFFFFF&quot; # Calculated value: current_date: `r Sys.Date()` # Output format depended value: fig_ext: `r if (knitr::is_latex_output()) &#39;png&#39; else null` Parameters usage example: ```{r, dia=&#39;from_src&#39;, fig.ext=params$fig_ext} to_diagram(src=&#39;...&#39;) ``` More info can be found here. 4.3.7 Putting all together To avoid redundant work, and to ease refactoring and tuning following methodology is suggested to use from the start to benefit from R Markdown features: Declare subject specific parameters for your documentation Define global options if necessary, use parameters to adjust options Define all the necessary options templates for your diagrams embedding. You could use differnet templates for different output formats and specify their names via params, or you could define universal templates and tune them via params or use if (knitr::is_&lt;html/latex&gt;_otput()) &lt;value1&gt; else &lt;value2&gt; pattern. Use options templates for diagrams code chunks, providing extra options if required "],["4.4-usage-format.html", "4.4 Data format", " 4.4 Data format By default following operations are made when diagram drawing is embedded into documentation: Diagram drawing is downoaded in svg format If output format is other than HTML then data is converted locally with rsvg tool into one of the following: pdf for PDF output png for the rest In some circumstances conversion with rsvg may have artifacts, and in this case data format can fix the problem. Usualy it’s better to set format for downoaded drawing, but not all renderers may support it, so you may try to change local side conversion output format. NOTE: some rendering engines like mermaid or pikchr produce only svg and rsvg can’t handle it right 4.4.1 Renderer format Speicfy format for downloaded drawing. Even though it should produce better result than the case below, not all rendering engines may support required format. See diagram types to_diagram(... , dformat=&#39;&lt;format&gt;&#39;) Possible values for &lt;format&gt;: png - loseless image, can be used for most output documentation formats jpeg - lossy image, can be used for most output documentation formats svg - for HTML output only, but can be locally converted to png, jpeg or pdf after downloading pdf - for PDF output only 4.4.2 Local conversion This kind of conversion is possible only in case if diagram drawings are rendered and downloaded in svg format. ```{r &lt;label&gt;, dia=&#39;from_src&#39;, fig.ext=&#39;&lt;format&gt;&#39;} to_diagram(...) ``` Possible values for &lt;format&gt;: png - loseless image, can be used for most output documentation formats jpeg - lossy image, can be used for most output documentation formats pdf - for PDF output only "],["4.5-usage-pdf.html", "4.5 PDF production", " 4.5 PDF production PDF document production most probably will require more attention. Make sure you are satisfied with your latex class for PDF output, to avoid redundant work. Then you’ll want for sure to limit hight for large drawings, but don’t hurry to do this. It’s better to start with splitting the pages and setting necessary layout first. 4.5.1 Page breaks Every chapter is started from new page. For additional page breaks just add the following line into document: \\newpage 4.5.2 Page orientation Make sure following lines are included into your latex preamble part: \\usepackage{lscape} \\usepackage{pdfpages} Then in documentation use following pattern: ``` Some text on a portrait page. \\newpage \\blandscape Some text on a landscape page. \\newpage \\elandscape Some other text on a portrait page. ``` "],["4.6-usage-spec.html", "4.6 Full to_diagram function specification", " 4.6 Full to_diagram function specification Function to_diagram is defined in docs_src/_fun.R file which should be included into index.Rmd file. More about this is TODO: devdoc-swissknife anatomy. This function renders diagram from textual description and inserts it into document. Diagram is inserted with knitr::include_graphics function or as raw SVG code for HTML output (raw svg can be turned off. Here is it’s definition: to_diagram &lt;- function( data = &quot;&quot;, src = &quot;&quot;, dformat = &quot;&quot;, rawsvg = TRUE, downloadOnly = FALSE, downloadName = &quot;&quot;, service=&quot;Kroki&quot;, serviceUrl=NULL, engine=NULL, page=NULL, force=FALSE ) Arguments: data - Diagram description in text form (should be compatible with rendering engine). Ignored if value for `src` is specified. src - Path to outer file with diagram description in text form. See `docs_src/diagrams/README.md` for details. Should be omitted if `data` argument is to be used. dformat - Specify data format for downloaded diagram. See https://kroki.io/#support for details. `svg` would be used by default if value is empty string. Sometimes SVG conversion to PDF/PNG not works good on client side (default). In that case it&#39;s suggested to use PNG or PDF. Take a NOTE: not all Kroki services provide diagrams in PNG / PDF format. rawsvg - Option to insert SVG as code right into HTML. This way text on diagrams is searchable. Enabled (TRUE) by default. Set to FALSE to embed SVG as image. Applicable only for HTML output and only if `dformat` is &quot;SVG&quot; or empty string. downloadName - File name (part before extension) for local diagram&#39;s files. downloadOnly - Only generate and download diagram, don&#39;t insert into doc. Use for custom diagram embedding later in the doc. All the necessary format conversions will be completed. Result would be in `docs_src/generated` dir. If `downloadName` is specified then it would be used for file name, otherwise label would be used if diagram is specified via data, otherwise file name would be generated from `src` path. File extension would depend on `dformat` argument and on `fig.ext` options for R chunk service - Rendering service (now it&#39;s sonly &quot;Kroki&quot;) serviceUrl - Rendering service base url. This is starting part of url for service access. Default is path `http://kroki:8000` to local Kroki instance that is started with `make_doc.sh` engine - Diagram rendering engine. Specify one of supported engines (see Kroki for engines list) Special value `from_src` for outer files SHOULD be used to get engine from source file itself in case if recommendations from `docs_src/diagrams/README.md` are satisfied. If omitted or NULL then value of R chunk option named `dia` is treated as `engine` page - Page for rendering. For use with multipage office documents force - If FALSE(default) then existing downloaded diagram data would be used. Set to TRUE to regenerate diagram from scratch "],["5-usage-other.html", "5 Other drawings ", " 5 Other drawings "],["5.1-usage-rendered.html", "5.1 Already rendered diagrams", " 5.1 Already rendered diagrams "],["5.2-usage-office.html", "5.2 Office files", " 5.2 Office files Office files could be used as source for diagrams ```{r, examples-libre-draw-singlepage, dia=&quot;draw&quot;} to_diagram(src = &quot;../diagrams/examples/libre-draw-singlepage.odg&quot;, service = &quot;Office&quot;) ``` You Draw By Hand May This is intended for drawings in first order, but actualy this could be any document that can be opened by Libre Office. "],["5.3-usage-custom-dia-render.html", "5.3 Add your custom renderer", " 5.3 Add your custom renderer "],["6-anatomy.html", "6 Project anatomy", " 6 Project anatomy "],["7-diagrams-reference.html", "7 Diagrams reference", " 7 Diagrams reference "],["7.1-refrencing-embeded-diagrams.html", "7.1 Refrencing embeded diagrams", " 7.1 Refrencing embeded diagrams https://www.rdocumentation.org/packages/knitr/versions/1.33/topics/fig_chunk "],["7.2-native-r-markdown.html", "7.2 Native R Markdown", " 7.2 Native R Markdown https://bookdown.org/yihui/rmarkdown-cookbook/diagrams.html "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
